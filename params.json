{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"## Введение\r\nСервис имеет RESTful HTTP API, предоставляющий средства для работы с файлами (загрузка, хранение, применение операций, получение информации о файле).  \r\nВсе запросы к API должны включать в себя HTTP-заголовок `Token`, содержащий токен доступа к сервису (строка, удовлетворяющая шаблону `[A-z0-9]{32}`).   \r\nОтветы API имеют тип `application/json` и являются JSON-словарём. В ответе всегда присутствует статус (поле `status`). Если запрос прошёл неуспешно, ответ содержит статус `\"error\"`, а также сообщение об ошибке в поле `msg`.  \r\nНекоторые ответы содержат поле `ttl`, которое следует трактовать как количество секунд, по истечении которого данные ответа перестанут быть актуальными и должны быть запрошены заново.\r\n\r\n## Загрузка и получение информации о файлах\r\n### Загрузка файла\r\n**Endpoint**: `/`  \r\n**Тип запроса**: `POST multipart/form-data`  \r\n**Поля запроса**:\r\n\r\n* `file`: бинарное содержимое файла\r\n* `type_id` (опциональное): идентификатор типа контента (строка длиной не более 32 символов), который будет использован для сбора статистики.  \r\n\r\n**Формат ответа**:  \r\n```\r\n{\r\n  \"status\": \"ok\",\r\n  \"resource_uri\": \"...\"\r\n}\r\n```\r\n`resource_uri` содержит относительный URI загруженного файла, указывающий на endpoint `/`.  \r\n\r\nПример загрузки файла с помощью curl: `curl --form type_id=42qwe --form file=@<path-to-file> --header \"Token: 01234567890123456789012345678901\" localhost:5000`.\r\n\r\n### Получение данных о файле\r\n**Endpoint**: `resource_uri`, имеющий вид `/<id>/`  \r\n**Тип запроса**: `GET`  \r\n**Поля запроса**: отсутствуют  \r\n**Формат ответа**: \r\n\r\n1. В случае, если файл с идентификатором `<id>` доступен, ответ будет иметь следующий формат:\r\n```\r\n{\r\n  \"status\": \"ok\",\r\n  \"data\": {\r\n    \"extra\": {...},\r\n    \"mimetype\": \"image/jpeg\",\r\n    \"name\": \"some.jpeg\",\r\n    \"size\": 211258,\r\n    \"url\": \"http://127.0.0.1/503dd7c48149954c99f41a29\"\r\n  },\r\n  \"ttl\": 604800\r\n}\r\n```\r\n`mimetype`: MIME-тип файла, вычисленный сервисом;  \r\n`name`: имя файла;  \r\n`size`: размер файла в байтах;  \r\n`url`: URL, по которому можно получить бинарное содержимое файла;  \r\n`extra`: словарь, содержащий некоторые метаданные о файле, поля варьируются в зависимости от типа файла.\r\n<table>\r\n  <tr>\r\n    <th>Тип файла</th> <th>Поля <code>extra</code></th>\r\n  </tr>\r\n  <tr>\r\n    <td>Изображение</td>\r\n    <td>width, height</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Видео</td>\r\n    <td>width, height, codec, length (длина в секундах)</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Аудио</td>\r\n    <td>codec, length (длина в секундах)</td>\r\n  </tr>\r\n</table>\r\n\r\n2. Если файл с идентификатором `<id>` -- результат операции над изображением (ресайза или поворота), `data` может содержать единственное поле `url`:\r\n```\r\n{\r\n  \"status\": \"ok\",\r\n  \"data\": {\r\n    \"url\": \"http://127.0.0.1/503dd7c48149954c99f41a29\"\r\n  },\r\n  \"ttl\": 15\r\n}\r\n```\r\n\r\n3. В случае, если файл с идентификатором `<id>` временно недоступен (например, является результатом ещё не выполненной операции над другим файлом), ответ будет иметь статус `\"wait\"`:\r\n```\r\n{\r\n  \"status\": \"wait\",\r\n  \"ttl\": 5\r\n}\r\n```\r\n\r\n## Операции над файлами\r\nСервис предоставляет возможность производить операции над файлами. Операция характеризуется именем и типом файлов, к которым она применима.\r\n\r\n### Применение операции к файлу\r\n**Endpoint**: `/<id>/`  \r\n**Тип запроса**: `GET`  \r\n**Поля запроса**:\r\n\r\n* `action`: имя операции\r\n* аргументы операции\r\n\r\n**Формат ответа**:  \r\n```\r\n{\r\n  \"status\": \"ok\",\r\n  \"resource_uri\": \"...\"\r\n}\r\n```\r\nОтвет со статусом `\"ok\"` означает, что операция поставлена в очередь и будет выполнена в ближайшем будущем, а её результат будет доступен по адресу `resource_uri`.  \r\n\r\nПример запроса с помощью curl:\r\n```\r\ncurl --header \"Token: 01234567890123456789012345678901\" \\\r\n    http://localhost/503dd7c48149954c99f41a29/?action=resize&mode=crop&w=100&h=50.\r\n```\r\n\r\n### Список доступных операций\r\n#### Операции, применимые к изображениям\r\nИзображением считается файл, MIME-тип которого начинается со строки `\"image/\"`.\r\n##### Конвертация в другой формат\r\nИмя операции: `convert`  \r\nАргументы:  \r\n* `to`: bmp, gif, jpeg, png, tiff\r\n\r\n##### Изменение размера\r\nИмя операции: `resize`  \r\nАргументы:  \r\n* `w`: высота\r\n* `h`: ширина\r\n* `mode`: keep, crop, resize\r\n\r\n    ###### keep\r\n    Изображение ресайзится с сохранением пропорций так, чтобы выполнялось одно из условий:\r\n      * высота изображения == w, ширина < h\r\n      * ширина изображения == h, высота < w\r\n\r\n    Можно указывать только одно из измерений.\r\n\r\n    ###### crop\r\n    1. Изображение ресайзится с сохранением пропорций так, чтобы выполнялось одно из условий:\r\n     * высота изображения == w, ширина > h\r\n     * ширина изображения == h, высота > w\r\n    2. Из середины полученного изображения вырезается прямоугольник размером w×h.\r\n\r\n    ###### resize\r\n    Изображение ресайзится до размера на w×h без сохрания пропорций.\r\n\r\n##### Приведение к черно-белому формату\r\nИмя операции: `grayscale`  \r\nАргументы: отсутствуют\r\n\r\n##### Поворот\r\nИмя операции: `rotate`  \r\nАргументы:\r\n* `angle`: угол поворота (считается против часовой стрелки), допустимые значения: 90, 180, 270\r\n\r\n* * *\r\n#### Операции, применимые к видео\r\nВидеофайлом считается файл, MIME-тип которого начинается со строки `\"video/\"`, либо равен `\"application/ogg\"`.\r\n##### Конвертация в другой формат/перекодирование\r\nИмя операции: `convert`  \r\nАргументы:  \r\n* `to`: ogg, webm, flv, avi, mkv, mov, mp4, mpg\r\n* `vcodec`: theora, h264, vp8, divx, h263, flv, mpeg1, mpeg2\r\n* `acodec`: vorbis, mp3\r\n\r\nНекоторые контейнеры поддерживают не все кодеки:\r\n<table>\r\n  <tr>\r\n    <th>Контейнер</th> <th>Видеокодеки</th> <th>Аудиокодеки</th>\r\n  </tr>\r\n  <tr>\r\n    <td>ogg</td>\r\n    <td>theora</td>\r\n    <td>vorbis</td>\r\n  </tr>\r\n  <tr>\r\n    <td>webm</td>\r\n    <td>vp8</td>\r\n    <td>vorbis</td>\r\n  </tr>\r\n  <tr>\r\n    <td>flv</td>\r\n    <td>h264, flv</td>\r\n    <td>vorbis, mp3</td>\r\n  </tr>\r\n  <tr>\r\n    <td>mp4</td>\r\n    <td>h264, divx, mpeg1, mpeg2</td>\r\n    <td>vorbis, mp3</td>\r\n  </tr>\r\n</table>\r\nКонвертировать в ogg и webm можно использовать без указания кодеков:\r\n`?action=convert&to=(ogg|webm)`\r\n\r\n##### Извлечение аудио-потока\r\nИмя операции: `extract_audio`  \r\nАргументы:  \r\n* `to`: alac, aac, vorbis, ac3, mp3, flac\r\n* * *\r\n\r\n#### Операции, применимые и к изображениям, и к видео\r\n##### Наложение ватермарка\r\nИмя операции: `watermark`  \r\nАргументы:  \r\n* `watermark`: resource URI ватермарка\r\n* `w`, `h`: ширина и высота прямоугольника, в который будет вписан ватермарк перед наложением\r\n* `w_pad`, `h_pad`: горизонтальный и вертикальный отступы\r\n* `corner`: угол, в который будет помещён ватермарк: `ne`, `se`, `sw`, `nw`\r\n\r\nЗначения `w`, `h`, `w_pad`, `h_pad` могут быть указаны как в процентах от картинки, на которую накладывается ватермарк, так и в пикселях. `w=25`, например, считается процентами, а `w=25px` -- пикселями.\r\n\r\n* * *\r\n\r\n#### Операции, применимые к документам\r\nДокументом считается файл, чей MIME-тип принадлежит следующему списку:  \r\n```\r\n\"application/msword\",\r\n\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\r\n\"application/vnd.oasis.opendocument.text\",\r\n\"application/pdf\",\r\n\"application/vnd.pdf\",\r\n\"application/x-pdf\",\r\n\"application/rtf\",\r\n\"application/x-rtf\",\r\n\"text/richtext\",\r\n\"text/plain\",\r\n\"text/html\"\r\n```\r\n##### Конвертация в другой формат\r\nИмя операции: `convert`  \r\nАргументы:  \r\n* `to`: doc, docx, odt, pdf, rtf, txt, html\r\n\r\n## Шаблоны\r\nШаблон -- упорядоченный набор совместимых операций и их аргументов. Под совместимостью подразумевается возможность каждую последующую операцию применить к результату предыдущей.  \r\nСервис предоставляет возможность создавать шаблоны и применять их к файлам из хранилища.\r\n\r\n### Создание шаблона\r\n**Endpoint**: `/template/`  \r\n**Тип запроса**: `POST multipart/form-data`  \r\n**Поля запроса**:\r\n\r\n* `applicable_for`: тип файлов, к которым применим шаблон. Допустимые значения: `image`, `video`, `doc`\r\n* `action[]`: список операций и их аргументов, заданных GET-строками.\r\n\r\n**Формат ответа**:  \r\n```\r\n{\r\n  \"status\": \"ok\",\r\n  \"resource_uri\": \"...\"\r\n}\r\n```\r\n`resource_uri` содержит относительный URI созданного шаблона, указывающий на endpoint `/template/`.  \r\n\r\nПример запроса для создания шаблона, который вначале отресайзит картинку, после чего сделает её черно-белой:\r\n```\r\napplicable_for: image\r\naction[]: action=resize&mode=keep&w=50&h=50\r\naction[]: action=grayscale\r\n```\r\n\r\n### Получение данных о шаблоне\r\n**Endpoint**: `resource_uri`, имеющий вид `/template/<id>/`  \r\n**Тип запроса**: `GET`  \r\n**Поля запроса**: отсутствуют  \r\n**Формат ответа**: \r\n\r\n```\r\n{\r\n  \"status\": \"ok\",\r\n  \"data\": {\r\n    \"applicable_for\": \"image\",\r\n    \"action_list\": [\r\n      [\"resize\", [\"keep\", 50, 50]],\r\n      [\"grayscale\", []]]\r\n    ],\r\n  }\r\n}\r\n```\r\nNote: ответ не имеет поля `ttl`.\r\n\r\n### Применение шаблона\r\n**Endpoint**: `/<id>/`  \r\n**Тип запроса**: `GET`  \r\n**Поля запроса**:\r\n\r\n* `template`: URI шаблона\r\n\r\n**Формат ответа**:  \r\n```\r\n{\r\n  \"status\": \"ok\",\r\n  \"resource_uri\": \"...\"\r\n}\r\n```\r\nОтвет со статусом `\"ok\"` означает, что применение шаблона `template` к файлу с идентификатором `<id>` поставлено в очередь, и результат будет доступен по адресу `resource_uri`\r\n\r\n## Архивирование файлов\r\nСервис предоставляет возможность создавать ZIP-архивы. Созданные архивы не являются обычными файлами с точки зрения API, так как имеют ограниченный срок жизни. Также к ним нельзя применять никаких последующих операций.\r\n\r\n### Создание ZIP-архива\r\n**Endpoint**: `/zip/`  \r\n**Тип запроса**: `POST multipart/form-data`  \r\n**Поля запроса**:\r\n\r\n* `file[]`: список URI архивируемых файлов\r\n* `filename`: имя архива\r\n\r\n**Формат ответа**:  \r\n```\r\n{\r\n  \"status\": \"ok\",\r\n  \"resource_uri\": \"...\"\r\n}\r\n```\r\n`resource_uri` содержит относительный URI созданного архива, указывающий на endpoint `/zip/`.\r\n\r\n### Получение данных о ZIP-архиве\r\n**Endpoint**: `resource_uri`, имеющий вид `/zip/<id>`  \r\n**Тип запроса**: `GET`  \r\n**Поля запроса**: отсутствуют  \r\n**Формат ответа**:  \r\n```\r\n{\r\n  \"status\": \"ok\",\r\n  \"ttl\": 604800,\r\n  \"data\": {\r\n    \"url\": \"http://127.0.0.1/uns/503dd7c48149954c99f41a29\"\r\n  }\r\n}\r\n```\r\n**ВАЖНО**: архивы перестают быть доступными по истечении своего `ttl`.","name":"Unistorage","tagline":"Документация","google":""}